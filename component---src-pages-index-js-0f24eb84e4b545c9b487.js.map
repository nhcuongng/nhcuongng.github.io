{"version":3,"sources":["webpack:///./content/images/nhcuong.jpg","webpack:///./src/components/Projects.js","webpack:///./src/data/projects.js","webpack:///./src/pages/index.js","webpack:///./src/components/Guides.js","webpack:///./src/components/Posts.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["module","exports","Projects","data","className","map","node","href","path","source","key","target","rel","icon","title","description","BlogIndex","latest","edges","popular","simplifiedLatest","useMemo","getSimplifiedPosts","Section","children","button","props","to","Layout","Helmet","config","siteTitle","SEO","src","nhcuong","alt","Posts","tags","withDate","projects","pageQuery","Guides","LinkType","guide","slug","id","staticThumbnail","height","width","fixed","thumbnail","Cell","date","Date","oneMonthAgo","setMonth","getMonth","isNew","tag","slugify","showYears","postsByYear","forEach","post","year","split","years","Object","keys","reverse","_objectWithoutPropertiesLoose","excluded","i","sourceKeys","length","indexOf"],"mappings":"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","file":"component---src-pages-index-js-0f24eb84e4b545c9b487.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/nhcuong-296c43b8bd0e6938f2c1348b8774c30d.jpg\";","import React from 'react'\n\nexport default function Projects({ data }) {\n  return (\n    <div className=\"grid projects\">\n      {data.map((node) => {\n        return (\n          <a\n            href={node.path || node.source}\n            key={node.path || node.source}\n            className=\"row\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <div className=\"cell simple\">{node.icon}</div>\n            <div className=\"cell simple\">{node.title}</div>\n            <div className=\"cell simple light description\">{node.description}</div>\n          </a>\n        )\n      })}\n    </div>\n  )\n}\n","export default [\n  {\n    icon: 'üå¥ ' ,\n    title: 'easy-update-mst',\n    path: 'https://www.npmjs.com/package/easy-update-mst',\n    source: 'https://github.com/nhcuongng/easy-update-mst',\n    description: 'Easy update state for mobx state tree',\n  },\n  {\n    icon: 'üîç' ,\n    title: 'react-history-search',\n    path: 'https://www.npmjs.com/package/react-history-search',\n    source: 'https://github.com/nhcuongng/react-history-search',\n    description: 'History Keyword will be saved and hint',\n  }\n]\n","import React, { useMemo } from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport Guides from '../components/Guides'\nimport Projects from '../components/Projects'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nimport projects from '../data/projects'\n// import interviews from '../data/interviews'\n// import speaking from '../data/speaking'\n\nimport nhcuong from '../../content/images/nhcuong.jpg'\n\nexport default function BlogIndex({ data }) {\n  const latest = data.latest.edges\n  const popular = data.popular.edges\n  const simplifiedLatest = useMemo(() => getSimplifiedPosts(latest), [latest])\n  const simplifiedPopular = useMemo(() => getSimplifiedPosts(popular), [\n    popular,\n  ])\n\n  const Section = ({ title, children, button, ...props }) => (\n    <section {...props}>\n      <h2>\n        {title}\n        {button && (\n          <Link className=\"section-button\" to=\"/blog\">\n            View all\n          </Link>\n        )}\n      </h2>\n      {children}\n    </section>\n  )\n\n  return (\n    <Layout>\n      <Helmet title={config.siteTitle} />\n      <SEO />\n      <section className=\"lead\">\n        <div className=\"container\">\n          <div className=\"copy\">\n            <h1>\n              Hello! I'm Mason.\n              {/* <br /> T√¥i l√† l·∫≠p tr√¨nh vi√™n c√πi b·∫Øp üë®‚Äçüåæ */}\n            </h1>\n            <p>\n              I'm a front end developer. This website is my little part of my life.\n              The good code was made with ‚ù§Ô∏è and by üôå\n            </p>\n            <a\n              href=\"mailto:cuong.nguyenhuu1997@gmail.com\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"button\"\n            >\n              <span className=\"emoji\">üíå</span> Contact to me\n            </a>\n            <a\n              href=\"https://docs.google.com/forms/d/e/1FAIpQLSfg1e-EZU3s5EJotrWram7_hjkx82vtJXU4aWABkSsaKMXZEQ/viewform?usp=sf_link\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"button secondary\"\n            >\n              <span className=\"emoji\">üì£</span>\n              Give Feedback\n            </a>\n          </div>\n\n          <div className=\"image\">\n            <img src={nhcuong} alt=\"Tania\" />\n          </div>\n        </div>\n      </section>\n      <div className=\"container index\">\n        <Section title=\"Latest Articles.\" button>\n          <Posts data={simplifiedLatest} tags withDate />\n        </Section>\n        {/* <Section title=\"B√†i vi·∫øt ph·ªï bi·∫øn\" button>\n          <Posts data={simplifiedPopular} tags withDate />\n        </Section> */}\n        <Section title=\"Projects\">\n          <Projects data={projects} />\n        </Section>\n        {/* <Section title=\"Interviews\">\n          <Guides data={interviews} />\n        </Section>\n        <Section title=\"Speaking\">\n          <Guides data={speaking} />\n        </Section> */}\n        <Section title=\"Source\">\n          <p>\n            Thanks to <a href=\"https://www.taniarascia.com/\">Tania Rascia</a> for awsome template\n          </p>\n          <a\n            href=\"https://github.com/taniarascia/taniarascia.com/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"button\"\n          >\n            <span className=\"emoji\">ü§û </span> source this template\n          </a>\n        </Section>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    latest: allMarkdownRemark(\n      limit: 5\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\") \n            title\n            tags\n          }\n        }\n      }\n    }\n    popular: allMarkdownRemark(\n      limit: 20\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { categories: { eq: \"Popular\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nexport default function Guides({ data }) {\n  const LinkType = ({ guide, children }) =>\n    guide.slug ? (\n      <Link key={guide.id} to={guide.slug}>\n        {children}\n      </Link>\n    ) : (\n      <a key={guide.id} href={guide.path}>\n        {children}\n      </a>\n    )\n\n  return (\n    <div className=\"grid guide\">\n      {data.map((guide) => {\n        return (\n          <LinkType key={guide.id} guide={guide}>\n            {guide.staticThumbnail ? (\n              <img\n                src={guide.staticThumbnail}\n                alt={guide.id}\n                height=\"50\"\n                width=\"50\"\n              />\n            ) : (\n              <Img fixed={guide.thumbnail} />\n            )}\n            <h2>{guide.title}</h2>\n            {guide.description && <p className=\"description\">{guide.description}</p>}\n          </LinkType>\n        )\n      })}\n    </div>\n  )\n}\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\n\nconst Cell = ({ node, tags, withDate }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  return (\n    <div className={`row ${!withDate ? 'narrow' : ''}`} key={node.id}>\n      <Link to={node.slug} className=\"cell\">\n        {isNew && <div className=\"new-post\">New!</div>}\n        <div>\n          {withDate && <time>{node.date}</time>}\n          <div>{node.title}</div>\n        </div>\n      </Link>\n      {tags && (\n        <div className=\"cell tags\">\n          {node.tags &&\n            node.tags.map((tag) => (\n              <Link\n                key={tag}\n                to={`/tags/${slugify(tag)}`}\n                className={`tag-${tag}`}\n              >\n                {tag}\n              </Link>\n            ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default function Posts({ data, tags, showYears, withDate }) {\n  const postsByYear = {}\n\n  data.forEach((post) => {\n    const year = post.date.split(', ')[1]\n\n    postsByYear[year] = [...(postsByYear[year] || []), post]\n  })\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n          {postsByYear[year].map((node) => (\n            <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n        {data.map((node) => (\n          <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n        ))}\n      </div>\n    )\n  }\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}