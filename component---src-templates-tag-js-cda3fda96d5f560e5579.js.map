{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/templates/tag.js","webpack:///./src/components/Posts.js"],"names":["getSimplifiedPosts","posts","options","map","post","id","node","date","frontmatter","slug","fields","tags","title","description","thumbnails","thumbnail","childImageSharp","fixed","slugify","string","match","x","toLowerCase","join","TagTemplate","data","tag","pageContext","totalCount","allMarkdownRemark","edges","simplifiedPosts","useMemo","message","config","siteTitle","className","class","withDate","pageQuery","Cell","Date","oneMonthAgo","setMonth","getMonth","isNew","key","to","Posts","showYears","postsByYear","forEach","year","split","years","Object","keys","reverse"],"mappings":"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","file":"component---src-templates-tag-js-cda3fda96d5f560e5579.js","sourcesContent":["export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter.thumbnail.childImageSharp.fixed,\n    }),\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function TagTemplate({ data, pageContext }) {\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post found.' : ' posts found.'\n\n  return (\n    <Layout>\n      <Helmet title={`Posts tagged: ${tag} | ${config.siteTitle}`} />\n      <SEO />\n      <header>\n        <div className=\"container text-center\">\n          <h1>\n            Posts tagged: <u>{tag}</u>\n          </h1>\n          <p class=\"subtitle\">\n            <span className=\"count\">{totalCount}</span>\n            {message}\n          </p>\n        </div>\n      </header>\n      <section className=\"container\">\n        <Posts data={simplifiedPosts} tags withDate />\n      </section>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\n\nconst Cell = ({ node, tags, withDate }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  return (\n    <div className={`row ${!withDate ? 'narrow' : ''}`} key={node.id}>\n      <Link to={node.slug} className=\"cell\">\n        {isNew && <div className=\"new-post\">New!</div>}\n        <div>\n          {withDate && <time>{node.date}</time>}\n          <div>{node.title}</div>\n        </div>\n      </Link>\n      {tags && (\n        <div className=\"cell tags\">\n          {node.tags &&\n            node.tags.map((tag) => (\n              <Link\n                key={tag}\n                to={`/tags/${slugify(tag)}`}\n                className={`tag-${tag}`}\n              >\n                {tag}\n              </Link>\n            ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default function Posts({ data, tags, showYears, withDate }) {\n  const postsByYear = {}\n\n  data.forEach((post) => {\n    const year = post.date.split(', ')[1]\n\n    postsByYear[year] = [...(postsByYear[year] || []), post]\n  })\n\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n          {postsByYear[year].map((node) => (\n            <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n        {data.map((node) => (\n          <Cell key={node.id} node={node} tags={tags} withDate={withDate} />\n        ))}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}